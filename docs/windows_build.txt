Building on Windows (experimental)

Python setup:
1. Install Python 2.5
2. Go into c:\Python25\Lib\distutils and create distutils.cfg containing:
[build]
compiler=mingw32

MinGW setup:
1. Download and install MinGW to C:\MinGW
2. Download "pexports" (google for it) utility and put in c:\MinGW\bin
3. Add C:\MinGW\bin to Windows PATH

HDF5 setup:
You MUST use the versions build with VS2005!

1. Download pre-build HDF5 1.8.1 (with DLLS) compiled with VS2005:
ftp://ftp.hdfgroup.org/HDF5/current/bin/windows/5-181-win-vs2005.zip
2. Download SZIP
ftp://ftp.hdfgroup.org/lib-external/szip/2.1/bin/windows/szip21-vs2005-enc.zip
3. Download ZLIB
ftp://ftp.hdfgroup.org/lib-external/zlib/1.2/bin/windows/zlib123-vs2005.zip

4. Unzip HDF5 to "C:\h181"  You should now have C:\h181\include, etc.
5. Open SZIP and ZLIB archives and copy their dlls to "C:\h181\dll"

6. Download and install "Microsoft Visual C++ 2005 SP1 Redistributable Package"
   It must be EXACTLY this, note it's **SP1**, or the HDF5 dll won't load.
   This is available from Microsoft's web site.
   
Create import library
1. Open a terminal and cd to C:\h181\lib
2. Run "pexports hdf5dll.dll > hdf5dll.def" to get the list of HDF5 exports
3. Run "dlltool -D hdf5dll.dll -d hdf5dll.def -l hdf5dll.dll.a" to create
   an import library that MinGW can handle.
3. Create the directory C:\h181\dll2
4. Copy the new file c:\h181\dll\hdf5dll.dll.a into c:\h181\dll2
5. Add the directory c:\h181\dll (NOT c:\h181\dll2) to your Windows PATH

Compile h5py
1. Extract h5py to c:\h5py
2. Run python setup.py build --hdf5=c:\h181
3. Run python setup.py test --hdf5=c:\h181

Isn't Windows easy to use?
