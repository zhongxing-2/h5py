#!/usr/bin/env python

#+
# 
# This file is part of h5py, a low-level Python interface to the HDF5 library.
# 
# Copyright (C) 2008 Andrew Collette
# http://h5py.alfven.org
# License: BSD  (See LICENSE.txt for full license)
# 
# $Date$
# 
#-

"""
    Setup script for the h5py package.  

    All commands take the usual distutils options, like --home, etc.  Cython is
    not required for installation, but will be invoked if the .c files are
    missing, one of the --pyrex options is used, or if a non-default API 
    version or debug level is requested.

    To build:
    python setup.py build

    To install:
    sudo python setup.py install

    To run the test suite locally (won't install anything):
    python setup.py test

    See INSTALL.txt or the h5py manual for additional build options.
"""

import os
import sys
import shutil
import os.path as op

from distutils.cmd import Command
from distutils.errors import DistutilsError, DistutilsExecError
from distutils.core import setup
from distutils.extension import Extension

class CmdOptions(object):

    """ Manages package and compiler options. """

    def __init__(self):

        # Basic package options
        self.NAME = 'h5py'
        self.VERSION = '0.3.1'
        self.MIN_NUMPY = '1.0.3'
        self.MIN_CYTHON = '0.9.8.1'
        self.KNOWN_API = (16,18)    # Legal API levels (1.8.X or 1.6.X)
        self.SRC_PATH = 'h5py'      # Name of directory with .pyx files
        self.CMD_CLASS = {}         # Custom command classes for setup()

        # Compilation flags
        self.CYTHON = False # Run Cython.  Default is OFF for distribution.
        self.API = (16,)    # API levels to include.  Default is 1.6.X only.
        self.DEBUG = 0      # Compile-time debug level.  Default is OFF.
        self.HDF5 = None    # Custom HDF5 directory.

        # Feature flags
        self.THREADS = False    # Thread-aware (safety & non-blocking IO)

    def get_pxi(self):
        """ Return a string with compile-time defines. """

        pxi_str = \
"""# This file is automatically generated.  Do not edit.

DEF H5PY_VERSION = "%(VERSION)s"

DEF H5PY_API = %(API_MAX)d     # Highest API level (i.e. 18 or 16)
DEF H5PY_16API = %(API_16)d    # 1.6.X API available
DEF H5PY_18API = %(API_18)d    # 1.8.X API available

DEF H5PY_DEBUG = %(DEBUG)d    # Logging-level number, or 0 to disable

DEF H5PY_THREADS = %(THREADS)d  # Enable thread-safety and non-blocking reads

"""
        opts = dict(self.__dict__)
        opts.update({   "API_MAX": max(self.API),
                        "API_16": 16 in self.API,
                        "API_18": 18 in self.API})
        return pxi_str % opts

        
opts = CmdOptions()     # Global to hold compilation options

def fatal(instring, code=1):
    print >> sys.stderr, "Fatal: "+instring
    exit(code)

def warn(instring):
    print >> sys.stderr, "Warning: "+instring

# === Required imports ========================================================

# Check Python version (2.5 or greater required)
if not (sys.version_info[0:2] >= (2,5)):
    fatal("At least Python 2.5 is required to install h5py")

# Check for Numpy (required)
try:
    import numpy
    if numpy.version.version < opts.MIN_NUMPY:
        fatal("Numpy version %s is out of date (>= %s needed)" % (numpy.version.version, opts.MIN_NUMPY))

except ImportError:
    fatal("Numpy not installed (version >= %s required)" % opts.MIN_NUMPY)

# === Parse command line arguments ============================================

for arg in sys.argv[:]:

    if arg == '--cython':
        opts.CYTHON = True
        sys.argv.remove(arg)

    elif arg.find('--api=') == 0:
        try:
            api = arg[6:]
            api = tuple(int(x) for x in api.split(',') if len(x) > 0)
            if len(api) == 0 or not all(x in opts.KNOWN_API for x in api):
                raise Exception
        except Exception:
            fatal('Illegal option to --api= (legal values are %s)' % ','.join(str(x) for x in opts.KNOWN_API))
        opts.API = api
        opts.CYTHON = True
        sys.argv.remove(arg)

    elif arg.find('--debug=') == 0:
        try:
            opts.DEBUG = int(arg[8:])
        except:
            fatal('Debuglevel not understood (wants --debug=<n>)')
        opts.CYTHON = True
        sys.argv.remove(arg)

    elif arg.find('--hdf5=') == 0:
        splitarg = arg.split('=',1)
        if len(splitarg) != 2:
            fatal("HDF5 directory not understood (wants --hdf5=/path/to/hdf5)")
        path = op.abspath(splitarg[1])
        if not op.exists(path):
            fatal("HDF5 path is illegal: %s" % path)
        opts.HDF5 = path
        opts.CYTHON = True
        sys.argv.remove(arg)

    elif arg.find('--threads') == 0:
        opts.THREADS = True
        opts.CYTHON = True
        sys.argv.remove(arg)

# Check if the config.pxi file needs to be updated for the given
# command-line options.
pxi_path = op.join(opts.SRC_PATH, 'config.pxi')
pxi = opts.get_pxi()
if not op.exists(pxi_path):
    try:
        f = open(pxi_path, 'w')
        f.write(pxi)
        f.close()
    except IOError:
        fatal('Failed write to "%s"' % pxi_path)
    opts.CYTHON = True
    if not "--force" in sys.argv: sys.argv.append("--force")  # Cython ignores .pxi change
else:
    try:
        f = open(pxi_path, 'r+')
    except IOError:
        fatal("Can't read file %s" % pxi_path)
    if f.read() != pxi:
        f.close()
        f = open(pxi_path, 'w')
        f.write(pxi)
        opts.CYTHON = True
        if not "--force" in sys.argv: sys.argv.append("--force")  # Cython ignores .pxi change
    f.close()

if 'sdist' in sys.argv:
    if os.path.exists('MANIFEST'):
        warn("Cleaning up stale MANIFEST file")
        os.remove('MANIFEST')
    shutil.copyfile(reduce(op.join, ('docs', 'source', 'build.rst')), 'INSTALL.txt')
        
# === Platform configuration & Cython check ====================================

# Cython modules (without extension)
modules = ['h5' , 'h5f', 'h5g', 'h5s', 'h5t', 'h5d',
                'h5a', 'h5p', 'h5z', 'h5i', 'h5r', 'h5fd', 'utils']

# Only enable H5O and H5L interface if we're building against 1.8.X
if 18 in opts.API:
    modules += ['h5o','h5l']

# C source files required for Cython code (with extension)
extra_src = ['utils_low.c']    


if opts.CYTHON:
    try:
        from Cython.Compiler.Main import Version
        from Cython.Distutils import build_ext
    except ImportError:
        fatal("Cython recompilation required, but Cython not installed.")

    if Version.version < opts.MIN_CYTHON:
        fatal("Old Cython version detected; at least %s required" % opts.MIN_CYTHON)

    # This is what enables Cython.  Explicit calls to compile() don't work yet,
    # which is really annoying and breaks a lot of the options behavior.
    opts.CMD_CLASS.update({'build_ext': build_ext})


# Platform-dependent arguments to setup() or Extension()
if os.name == 'nt':
    if opts.HDF5 is None:
        fatal("On Windows, HDF5 directory must be specified.")

    libraries = ['hdf5dll']
    include_dirs = [numpy.get_include(), op.join(opts.HDF5, 'include')]
    library_dirs = [op.join(opts.HDF5, 'dll2')]  # Must contain only "hdf5dll.dll.a"
    runtime_dirs = []
    extra_compile_args = ['-DH5_USE_16_API', '-D_HDF5USEDLL_', '-DH5_SIZEOF_SSIZE_T=4']
    extra_link_args = []
    package_data = {'h5py': ['*.pyx', '*.dll', 
                                    'Microsoft.VC90.CRT/*.manifest',
                                    'Microsoft.VC90.CRT/*.dll'],
                       'h5py.tests': ['data/*.hdf5']}

else:   # Assume Unix-like

    libraries = ['hdf5']
    if opts.HDF5 is None:
        include_dirs = [numpy.get_include(), '/usr/include', '/usr/local/include']
        library_dirs = ['/usr/lib/', '/usr/local/lib']
    else:
        include_dirs = [numpy.get_include(), op.join(opts.HDF5, 'include')]
        library_dirs = [op.join(opts.HDF5, 'lib')]
    runtime_dirs = library_dirs
    extra_compile_args = ['-DH5_USE_16_API', '-Wno-unused', '-Wno-uninitialized']
    extra_link_args = []

    package_data = {'h5py': ['*.pyx'],
                   'h5py.tests': ['data/*.hdf5']}

# Explicit list of source files for each module.
mod_paths = [op.join(opts.SRC_PATH, x) for x in modules]
extra_paths = [op.join(opts.SRC_PATH, x) for x in extra_src]
if opts.CYTHON:
    module_sources = [[x+'.pyx']+extra_paths for x in mod_paths]
else:
    module_sources = [[x+'.c']+extra_paths for x in mod_paths]

extensions = [ Extension(opts.NAME+'.'+module,
                        sources, 
                        include_dirs = include_dirs, 
                        libraries = libraries,
                        library_dirs = library_dirs,
                        runtime_library_dirs = runtime_dirs,
                        extra_compile_args = extra_compile_args,
                        extra_link_args = extra_link_args)
                for module, sources in zip(modules, module_sources) ]


# === Custom extensions for distutils =========================================

class test(Command):
    description = "Build and run unit tests"
    user_options = [('sections=','s','Comma separated list of tests ("-" prefix to NOT run)')]

    def initialize_options(self):
        self.sections = None

    def finalize_options(self):
        pass

    def run(self):
        buildobj = self.distribution.get_command_obj('build')
        buildobj.run()
        oldpath = sys.path
        try:
            sys.path = [op.abspath(buildobj.build_lib)] + oldpath
            import h5py.tests
            if not h5py.tests.runtests(None if self.sections is None else tuple(self.sections.split(','))):
                raise DistutilsError("Unit tests failed.")
        finally:
            sys.path = oldpath

class dev(Command):

    description = "Developer commands (--doc, --clean, --readme=<file>)"
    user_options = [('doc','d','Rebuild documentation'),
                    ('clean', 'c', 'Remove built files and Cython temp files.')]
    boolean_options = ['doc']

    def initialize_options(self):
        self.doc = False
        self.readme = False
        self.clean = False

    def finalize_options(self):
        pass

    def run(self):
        if self.clean:
            for x in ('build','docs/api-html', 'docs/manual-html'):
                try:
                    shutil.rmtree(x)
                except OSError:
                    pass
            fnames = [ op.join(opts.SRC_PATH, x+'.dep') for x in modules ] + \
                     [ op.join(opts.SRC_PATH, x+'.c') for x in modules ] + \
                     [ 'MANIFEST']

            for name in fnames:
                try:
                    os.remove(name)
                except OSError:
                    pass

        if self.doc:
            buildobj = self.distribution.get_command_obj('build')
            buildobj.run()
            for x in ('docs', 'docs/api-html'):
                if not op.exists(x):
                    os.mkdir(x, 0755)

            retval = os.spawnlp(os.P_WAIT, 'epydoc', '-q', '--html',
                        '-o', 'docs/api-html', '--config', 'docs.cfg', 
                        os.path.join(buildobj.build_lib, NAME) )
            if retval != 0:
                warn("Could not run epydoc to build documentation.")


            retval = os.system("cd docs; make html")
            if retval != 0:
                warn("Could not run Sphinx doc generator")
            else:
                if op.exists('docs/manual-html'):
                    shutil.rmtree('docs/manual-html')
                shutil.copytree('docs/build/html', 'docs/manual-html')

# New commands for setup (e.g. "python setup.py test")
if os.name == 'nt':
    opts.CMD_CLASS.update({'test': test})
else:
    opts.CMD_CLASS.update({'dev': dev, 'test': test})


cls_txt = \
"""
Development Status :: 4 - Beta
Intended Audience :: Developers
Intended Audience :: Information Technology
Intended Audience :: Science/Research
License :: OSI Approved :: BSD License
Programming Language :: Python
Topic :: Scientific/Engineering
Topic :: Software Development :: Libraries :: Python Modules
Operating System :: Unix
Operating System :: POSIX :: Linux
Operating System :: MacOS :: MacOS X
Operating System :: Microsoft :: Windows
"""

short_desc = "General-purpose Python bindings for the HDF5 library"

long_desc = \
"""
The h5py package provides both a high- and low-level interface to the HDF5
library from Python. The low-level interface is intended to be a complete
wrapping of the HDF5 API, while the high-level component supports Python-style
object-oriented access to HDF5 files, datasets and groups.

A strong emphasis on automatic conversion between Python (Numpy) datatypes and
data structures and their HDF5 equivalents vastly simplifies the process of
reading and writing data from Python. 
"""

setup(
  name = opts.NAME,
  version = opts.VERSION,
  description = short_desc,
  long_description = long_desc,
  classifiers = [x for x in cls_txt.split("\n") if x],
  author = 'Andrew Collette',
  author_email = '"h5py" at the domain "alfven.org"',
  maintainer = 'Andrew Collette',
  maintainer_email = '"h5py" at the domain "alfven.org"',
  url = 'h5py.alfven.org',
  packages = ['h5py','h5py.tests'],
  package_data = package_data,
  ext_modules = extensions,
  requires = ['numpy (>=%s)' % opts.MIN_NUMPY],
  cmdclass = opts.CMD_CLASS
)



