from distutils.command.build_ext import build_ext
import os.path as op, os
from Cython.Build import cythonize
import sys
from setuptools import Extension, setup

import api_gen


MODULES =  ['defs','_errors','_objects','_proxy', 'h5fd', 'h5z',
            'h5','h5i','h5r','utils',
            '_conv', 'h5t','h5s',
            'h5p',
            'h5d', 'h5a', 'h5f', 'h5g',
            'h5l', 'h5o',
            'h5ds', 'h5ac']


def newer(f1, f2):
    """ Determine if f1 is newer than f2.
    
    If f1 (the file in question) doesn't exist, then no.
    If f2 (the reference file) doesn't exist, then yes.
    """
    if not op.isfile(f2):
        return True
    if not op.isfile(f1):
        return False
    return os.stat(f1).st_mtime > os.stat(f2).st_mtime
    
def localpath(*args):
    return op.abspath(reduce(op.join, (op.dirname(__file__),)+args))

# Determine base compiler settings appropriate for the platform.  The actual
# extension settings will be a tweaked vesion of these, according to things
# like whether MPI is enabled, etc.

if sys.platform.startswith('win'):
    COMPILER_SETTINGS = {
        'libraries'     : ['h5py_hdf5', 'h5py_hdf5_hl'],
        'include_dirs'  : [localpath('lzf'),
                           localpath('windows')],
        'library_dirs'  : [],
        'define_macros' : [('H5_USE_16_API', None), ('_HDF5USEDLL_', None)]
    }

else:
    COMPILER_SETTINGS = {
       'libraries'      : ['hdf5', 'hdf5_hl'],
       'include_dirs'   : [localpath('lzf'), '/opt/local/include', '/usr/local/include'],
       'library_dirs'   : ['/opt/local/lib', '/usr/local/lib'],
       'define_macros'  : [('H5_USE_16_API', None)]
    }



def configure_cython(config):
    """ Set up the Cython build environment.

    If configuration settings have changed since the last time Cython was
    run, re-write the file "config.pxi".  Also bump the utime of all the
    Cython modules to trigger a rebuild.
    """

    fname = localpath('h5py', 'config.pxi')
    if op.isfile(fname) and not config.rebuild_required:
        return
        
    with open(fname, 'wb') as f:
        s = """\
# This file is automatically generated by the h5py setup script.  Don't modify.

DEF MPI = %(mpi)s
DEF HDF5_VERSION = %(version)s
"""
        s %= {'mpi': config.mpi,
              'version': tuple(int(x) for x in config.hdf5_version.split('.'))}
        s = s.encode('utf-8')
        f.write(s)


class h5py_build_ext(build_ext):

    def _make_extensions(self, config):
        """ Get a list of Extension instances.
        
        config: configure command object"""
        import numpy
        

        extra_src = {'h5z': [ localpath("lzf/lzf_filter.c"),
                      localpath("lzf/lzf/lzf_c.c"),
                      localpath("lzf/lzf/lzf_d.c")]}

        # Tweak compiler settings for the current configuration
        settings = COMPILER_SETTINGS.copy()
        settings['include_dirs'] += [numpy.get_include()]
        if config.mpi:
            import mpi4py
            settings['include_dirs'] += mpi4py.get_include()
            
        # Ensure a custom location appears first, so we don't get a copy of
        # HDF5 from some default location in COMPILER_SETTINGS
        if config.hdf5 is not None:
            settings['include_dirs'].insert(0, config.hdf5)
            settings['library_dirs'].insert(0, config.hdf5)

        # TODO: should this only be done on UNIX?
        settings['runtime_library_dirs'] = settings['library_dirs']
        
        def make_extension(module):
            sources = [localpath('h5py', module+'.pyx')] + extra_src.get(module, [])
            return Extension('h5py.'+module, sources, **settings)

        return [make_extension(m) for m in MODULES]
        
        
    def run(self):
    
        config = self.distribution.get_command_obj('configure')
        config.run()
        
        # Rebuild low-level defs if missing or stale
        if newer(localpath('h5py','functions.txt'), localpath('h5py', 'defs.pyx')):
            api_gen.run()
            
        # Write config file
        mpi = bool(config.mpi)
        version = config.hdf5_version if config.hdf5_version is not None else '1.8.4'
        configure_cython(config)
        
        # Run Cython
        self.extensions = cythonize(self._make_extensions(config), force=config.rebuild_required or self.force)
        
        # Perform the build
        build_ext.run(self)
        
        # Mark the configuration as built
        config.reset_rebuild()