from distutils.command.build_ext import build_ext
import os.path as op
from Cython.Build import cythonize
import sys
from setuptools import Extension, setup

import api_gen

def newer(f1, f2):
    """ Determine if f1 is newer than f2.
    
    If f1 (the file in question) doesn't exist, then no.
    If f2 (the reference file) doesn't exist, then yes.
    """
    if not op.isfile(f2):
        return True
    if not op.isfile(f1):
        return False
    return os.stat(f1).st_mtime > os.stat(f2).st_mtime
    
def localpath(*args):
    return op.abspath(reduce(op.join, (op.dirname(__file__),)+args))

HDF5 = None
HDF5_VERSION = (1, 8, 4)
MPI = False

if sys.platform.startswith('win'):
    COMPILER_SETTINGS = {
        'libraries'     : ['h5py_hdf5','h5py_hdf5_hl'],
        'include_dirs'  : [localpath('lzf'),
                           localpath('windows')],
        'library_dirs'  : [],
        'define_macros' : [('H5_USE_16_API', None), ('_HDF5USEDLL_', None)]
    }
    if HDF5 is not None:
        COMPILER_SETTINGS['include_dirs'] += [op.join(HDF5, 'include')]
        COMPILER_SETTINGS['library_dirs'] += [op.join(HDF5, 'lib')]
        for f in ('h5py_hdf5.dll', 'h5py_hdf5_hl.dll', 'szip.dll', 'zlib.dll'):
            shutil.copy(op.join(HDF5, 'bin', f), localpath('h5py', f))
else:
    COMPILER_SETTINGS = {
       'libraries'      : ['hdf5', 'hdf5_hl'],
       'include_dirs'   : [localpath('lzf')],
       'library_dirs'   : [],
       'define_macros'  : [('H5_USE_16_API', None)]
    }
    if HDF5 is not None:
        COMPILER_SETTINGS['include_dirs'] += [op.join(HDF5, 'include')]
        COMPILER_SETTINGS['library_dirs'] += [op.join(HDF5, 'lib'), op.join(HDF5, 'lib64')]
    elif sys.platform == 'darwin':
        # putting here both macports and homebrew paths will generate
        # "ld: warning: dir not found" at the linking phase 
        COMPILER_SETTINGS['include_dirs'] += ['/opt/local/include'] # macports
        COMPILER_SETTINGS['library_dirs'] += ['/opt/local/lib']     # macports
        COMPILER_SETTINGS['include_dirs'] += ['/usr/local/include'] # homebrew
        COMPILER_SETTINGS['library_dirs'] += ['/usr/local/lib']     # homebrew
    elif sys.platform.startswith('freebsd'):
        COMPILER_SETTINGS['include_dirs'] += ['/usr/local/include'] # homebrew
        COMPILER_SETTINGS['library_dirs'] += ['/usr/local/lib']     # homebrew
    if MPI:
        COMPILER_SETTINGS['include_dirs'] += [mpi4py.get_include()]
    COMPILER_SETTINGS['runtime_library_dirs'] = [op.abspath(x) for x in COMPILER_SETTINGS['library_dirs']]



def configure_cython(mpi, version):
    """ Set up the Cython build environment.

    If configuration settings have changed since the last time Cython was
    run, re-write the file "config.pxi".  Also bump the utime of all the
    Cython modules to trigger a rebuild.
    """

    try:
        f = open(localpath('h5py/config.pxi'),'rb')
        oldcontents = f.read()
    except IOError:
        oldcontents = b""
    else:
        f.close()
    
    newcontents = """\
# This file is automatically generated by the h5py setup script.  Don't modify.

DEF MPI = %(mpi)s
DEF HDF5_VERSION = %(version)s
"""
    newcontents %= {'mpi': mpi, 'version': version}
    newcontents = newcontents.encode('utf-8')

    # Only reconfigure and rebuild if settings have actually changed.
    if newcontents != oldcontents:
        with open(localpath('h5py/config.pxi'),'wb') as f:
            f.write(newcontents)
        for m in MODULES:
            os.utime(localpath('h5py', m+'.pyx'), None)

MODULES =  ['defs','_errors','_objects','_proxy', 'h5fd', 'h5z',
            'h5','h5i','h5r','utils',
            '_conv', 'h5t','h5s',
            'h5p',
            'h5d', 'h5a', 'h5f', 'h5g',
            'h5l', 'h5o',
            'h5ds', 'h5ac']


class h5py_build_ext(build_ext):

    def _make_extensions(self):
        """ Get a list of Extension instances """
        import numpy
        
        extra_src = {'h5z': [ localpath("lzf/lzf_filter.c"),
                      localpath("lzf/lzf/lzf_c.c"),
                      localpath("lzf/lzf/lzf_d.c")]}

        settings = COMPILER_SETTINGS.copy()
        settings['include_dirs'] += [numpy.get_include()]
        
        def make_extension(module):
            sources = [localpath('h5py', module+'.pyx')] + extra_src.get(module, [])
            return Extension('h5py.'+module, sources, **settings)

        return [make_extension(m) for m in MODULES]
        
        
    def run(self):
    
        # Rebuild low-level defs if missing or stale
        if newer(localpath('h5py','functions.txt'), localpath('h5py', 'defs.pyx')):
            print "*"*10, "api_gen.py rebuild"
            api_gen.run()
            
        # Write config file
        configure_cython(False, (1, 8, 4))
        
        # Run Cython
        self.extensions = cythonize(self._make_extensions())
        
        # Perform the build
        build_ext.run(self)
        